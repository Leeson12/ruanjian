#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<queue>
int en;
int vn;
char x[100],y[100];
bool visit[100];
using namespace std;
typedef struct ENode
{
 struct ENode *next;
int locan;
}*EN;
struct VNode
{
 struct ENode *first;
 char data;
}V[100];	
int getLocan(char a)
{
 for(int i=0;i<vn;i++)
	        if(V[i].data==a)
	        return i;
	    return 0;
	}
	void createEraph(char x[],char y[])
	{
	    for(int i=en-1;i>=0;i--)
	    {
	        int al=getLocan(x[i]);
	        int bl=getLocan(y[i]);
	        EN e;
	        e=(EN)malloc(sizeof(ENode));
	        e->locan=bl;
	        e->next=NULL;
	        if(V[al].first==NULL)
	            V[al].first=e;
	        else
	        {
	            EN jj;
	            jj=V[al].first;
	            while(jj->next!=NULL)
	                jj=jj->next;
	            jj->next=e;
	        }
	    }
	}
void began()
	{
	    int i;
	    scanf("%d",&vn);
	    getchar();
	    for(i=0;i<vn;i++)
	    {
	        scanf("%c",&V[i].data);
	        getchar();
	        V[i].first=NULL;
	    }
	    scanf("%d",&en);
	    getchar();
	    for(i=0;i<en;i++)
	    {
	        scanf("%c %c",&x[i],&y[i]);
	        getchar();
	    }
	    createEraph(x,y);
	}
	void DFS()
	{
	    for(int i=0;i<vn;i++)
	    {
	        if(!visit[i])
	        {
	            printf("%c  ",V[i].data);
	            visit[i]=1;
	        }
	        EN e=V[i].first;
	        while(e!=NULL&&!visit[e->locan])
	        {
	            printf("%c  ",V[e->locan].data);
	            visit[e->locan]=1;
	            e=V[e->locan].first;
	        }
	    }
	}
	void BFS()
	{
	    queue<int> q;
	    q.push(0);
	    visit[0]=true;
	    while(!q.empty())
	    {
	        int x=q.front();
	        printf("%c  ",V[x].data);
	        visit[x]=1;
	        q.pop();
	        EN e=V[x].first;
	        while(e!=NULL&&visit[e->locan]==0)
	        {
	            q.push(e->locan);
	            visit[e->locan]=1;
	            e=e->next;
	        }
	    }
	}
	int main()
	{
	    began();
	    DFS();
	    printf("\n");
	    memset(visit,0,sizeof(visit));
	    BFS();
	    return 0;
	}

